.. _context:

*******
Context
*******

.. contents::
   :local:

The :mod:`.context` module provides support for quantity calculus when combined with the modules :mod:`.dimension` and :mod:`.kind_of_quantity`. 

Kinds of quantity are considered independent entities that become associated with unique dimensions in a context. 

A :class:`.Context` is initialised by a set of kinds of quantity, which become the base quantities for that context. Other kinds of quantity of quantity can be declared by a defining expression in terms of base quantities and other quantities already declared. 

For instance, the following displays the tuple ``(1,1,0)`` representing the dimensions :math:`I^1V^1T^0`, i.e., dimensions of current and voltage.  ::

    from QV import *
    
    context = Context(
        ("Current","I"),("Voltage","V"),("Time","T")
    )
    
    context.declare('Resistance','R','Voltage/Current')
    context.declare('Power','P','V*V/R')
    print( context.dimensions('P') )


:class:`.KindOfQuantity` objects can be retrieved from a context and used in expressions:

.. code-block:: python 

    Voltage = context['Voltage']
    Resistance = context['Resistance']
    
    tmp = Voltage/Resistance
    
    print( tmp )
    print( context.evaluate( tmp ) )

which displays 

.. code-block:: pycon 

    Div(V,R) 
    I 
    
Here ``tmp`` is an intermediate result formed by dividing the objects representing voltage and current. QV does not try to resolve intermediate results generated by an arbitrary number of multiplications and divisions. The method :meth:`.Context.evaluate` must be used explicitly to resolve the kind of quantity of a temporary object. 
 
.. _context_module:

.. automodule:: QV.context
    :members: 
    :inherited-members:
